#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
int n,m;
const int inf = 1000000;
int wall[101][101];//벽부수기 횟수
int map[101][101];//지도
int dx[] = {-1,1,0,0};//축 이동
int dy[] = {0,0,-1,1};

//입력
void input(){
    cin>>m>>n;
    //지도입력
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            scanf("%1d",&map[i][j]);
            wall[i][j] = inf;//초기화
        }
    }
}

//벽부수기 탐색
void bfs(){
    //초기좌표 넣기
    queue<pair<int,int>> q;
    q.push({1,1});
    wall[1][1] = 0;
    
    //다음지점 탐색
    while(!q.empty()){
        //현재지점
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        
        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            //범위내에 들고
            if(nx>=1 && nx<=n && ny>=1 && ny<=m){
                //벽이 있다면
                if(map[nx][ny]==1){
                    //더 작은 값이 오면 갱신
                    if(wall[nx][ny]>wall[x][y]+1){
                        wall[nx][ny] = wall[x][y] + 1;
                        q.push({nx,ny});
                    }
                }else{//벽이 없으면
                    if(wall[nx][ny]>wall[x][y]){
                        wall[nx][ny] = wall[x][y];
                        q.push({nx,ny});
                    }
                }
            }
        }
    }
    cout<<wall[n][m];//출력
}

int main(){
    cin.tie(0);
    cout.tie(0);
    
    input();//입력
    bfs();//벽부수기
    return 0;
}
