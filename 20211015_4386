#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n;
double dist;
double map_x[101];
double map_y[101];
vector<pair<double,pair<int,int>>> star;
int parent[101];//각 노드의 부모노드

//입력
void input(){
    cin>>n;
    for(int i=1;i<=n;i++){
        cin>>map_x[i]>>map_y[i];
        parent[i] = i;
    }
    //별의 거리 담기
    for(int i=1;i<n;i++){
        for(int j=i+1;j<=n;j++){
            double dist_x = pow(map_x[j]-map_x[i],2);
            double dist_y = pow(map_y[j]-map_y[i],2);
            dist = sqrt(dist_x+dist_y);//별간 거리
            star.push_back({dist,{i,j}});
        }
    }
    sort(star.begin(),star.end());//거리순 정렬
}

//루트노드 찾기
int find(int x){
    if(parent[x]==x){//부모가 루트노드이면
        return x;
    }
    parent[x] = find(parent[x]);//거슬러 올라감
    return parent[x];
}

//최소 스패닝 트리
void bfs(){
    double sum = 0;
    int node = 0;
    for(int i=0;i<star.size();i++){
        double cost = star[i].first;//비용
        int x = star[i].second.first;
        int y = star[i].second.second;
        
        //루트노드가 서로 다르면 합체
        int a = find(x);
        int b = find(y);
        if(a!=b){
            parent[b] = a;
            sum+=cost;
            node+=1;
        }
        //종료 및 출력
        if(node==n-1){
            printf("%.2f",sum);
            return;
        }
    }
}

int main(){
    cin.tie(0);
    cout.tie(0);
    
    input();
    bfs();
    return 0;
}
