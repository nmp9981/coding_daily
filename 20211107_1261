#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
int n,m,s,e;
const int maxi = 100;
const int inf = 100000;
int map[maxi][maxi];
int wall[maxi][maxi];//벽부수기 횟수
int dx[] = {-1,1,0,0};//축 이동
int dy[] = {0,0,-1,1};

//입력
void input(){
    cin>>m>>n;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            scanf("%1d",&map[i][j]);
            wall[i][j] = inf;//초기화
        }
    }
}

//벽부수기
void bfs(){
    queue<pair<int,int>> q;
    q.push({0,0});//맨 처음위치
    wall[0][0] = 0;
    
    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        
        //4방탐색
        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            //범위내에 있으면
            if(nx>=0 && nx<n && ny>=0 && ny<m){
                //벽이면
                if(map[nx][ny]==1){
                    //중복방지를 위해 더 작은수가 올때만 큐에 새로운 지점 삽입
                    if(wall[nx][ny]>wall[x][y]+1){
                        wall[nx][ny] = min(wall[nx][ny],wall[x][y] + 1);
                        q.push({nx,ny});
                    }
                }else{//벽이 아니면
                    if(wall[nx][ny]>wall[x][y]){
                        wall[nx][ny] = min(wall[nx][ny],wall[x][y]);
                        q.push({nx,ny});
                    }
                }
            }
        }
    }
    cout<<wall[n-1][m-1];//출력
}
int main(){
    cin.tie(0);
    cout.tie(0);

    input();//입력
    bfs();//벽부수기
    return 0;
}
