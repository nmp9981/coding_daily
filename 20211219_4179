#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <queue>
using namespace std;

int r,c;
int ans = 0;
const int maxi = 1001;
string maze[maxi];
queue<pair<int,int>> fire;
queue<pair<int,int>> jihun;
int visit[maxi][maxi];//지훈 방문지점
//축이동
int dx[4] = {0,0,-1,1};
int dy[4] = {-1,1,0,0};

//입력
void input(){
    cin>>r>>c;
    for(int i=0;i<r;i++){
        cin>>maze[i];
    }
    memset(visit,0,sizeof(visit));//초기화
}

//탈출하기
bool escape(){
    //초기지점을 큐에 넣기
    for(int i=0;i<r;i++){
        for(int j=0;j<c;j++){
            if(maze[i][j]=='J'){
                jihun.push({i,j});
                visit[i][j] = 1;//방문체크
            }
            if(maze[i][j]=='F'){
                fire.push({i,j});
            }
        }
    }
    
    //탈출진행
    while(!jihun.empty()){
        //불길
        int fire_size = fire.size();
        for(int k=0;k<fire_size;k++){
            int f_x = fire.front().first;
            int f_y = fire.front().second;
            fire.pop();
        
            //다음지점
            for(int i=0;i<4;i++){
                int nx = f_x + dx[i];
                int ny = f_y + dy[i];
                //범위내에 들고 미방문
                if(nx>=0 && nx<r && ny>=0 && ny<c){
                    if(maze[nx][ny]=='.' || maze[nx][ny]=='J'){
                        maze[nx][ny] = 'F';
                        fire.push({nx,ny});
                    }
                }
            }
        }
        //지훈
        int j_size = jihun.size();
        for(int k=0;k<j_size;k++){
            int j_x = jihun.front().first;
            int j_y = jihun.front().second;
            jihun.pop();
            
            //탈출성공
            if(j_x==0 || j_x==r-1 || j_y==0 || j_y==c-1){
                ans+=1;
                return true;
            }
            //다음지점
            for(int i=0;i<4;i++){
                int nx = j_x + dx[i];
                int ny = j_y + dy[i];
                //범위내에 들고 미방문
                if(nx>=0 && nx<r && ny>=0 && ny<c){
                    if(maze[nx][ny]=='.' && visit[nx][ny] == 0){
                        visit[nx][ny] = 1;
                        jihun.push({nx,ny});
                    }
                }
            }
        }
        ans++;
    }
    return false;
}

int main(){
    input();//입력
    if(escape()==false){
        cout<<"IMPOSSIBLE";
    }else{
        cout<<ans;
    }
    return 0;
}
