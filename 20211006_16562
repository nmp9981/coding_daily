#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m,k;
int parent[10001];//각 노드의 부모노드
int pay[10001];//친구비
int root_node[10001];//루트노드 판별여부

//초기화
void init(){
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
}

//루트노드 찾기
int find(int x){
    if(parent[x]==x){
        return x;
    }
    parent[x] = find(parent[x]);
    return parent[x];
}

//두 트리 합치기
void merge(int x,int y){
    x = find(x);
    y = find(y);
    if(x==y){
        return;
    }else{
        if(pay[x]>pay[y]){//더 싼쪽을 루트노드로
            parent[x] = y;//x의 부모노드는 y
        }else{
            parent[y] = x;
        }
    }
}

//입력
void input(){
    //친구비 입력
    for(int i=1;i<=n;i++){
        cin>>pay[i];
    }
    
    for(int i=1;i<=m;i++){
        int a,b;
        cin>>a>>b;
        merge(a,b);//합치기
    }
}

//친구비 구하기
void cost(){
    int friend_cost = 0;
    for(int i=1;i<=n;i++){
        int root = find(i);//루트 노드구하기
        if(root_node[root]==0){//아직 체크가 안되어 있다면
            root_node[root] = 1;//루트노드 체크
            friend_cost += pay[root];//친구비 증가
        }
    }
    //가능한가?
    if(friend_cost<=k){
        cout<<friend_cost;
    }else{
        cout<<"Oh no";
    }
}

int main(){
    cin.tie(0);
    cout.tie(0);
    
    cin>>n>>m>>k;//입력을 먼저 받고 초기화
    init();//초기화
    input();//입력
    cost();//친구비 구하기
    
    return 0;
}
