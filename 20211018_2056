#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n;
vector<int> tree[10001];//트리
int parent[10001];//각 노드의 부모노드
int sec[10001];//각 노드별 소요시간
int times[10001];//각 노드별 최종시간
int node[10001];//진입노드

//입력
void input(){
    cin>>n;
    //부모노드 초기화
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
    //입력
    for(int i=1;i<=n;i++){
        cin>>sec[i];//각 노드별 시간 입력
        int num;
        cin>>num;
        for(int j=0;j<num;j++){
            int a;
            cin>>a;
            tree[a].push_back(i);//a->i
            node[i]+=1;//진입노드 추가
        }
    }
}

void bfs(){
    //진입노드가 0인것 모두 큐에 넣기
    queue<int> q;
    for(int i=1;i<=n;i++){
        if(node[i]==0){
            q.push(i);
            times[i] = sec[i];//dp초기화
        }
    }
    
    while(!q.empty()){
        int x = q.front();//현재좌표
        q.pop();
        
        //이웃노드 탐색
        for(int i=0;i<tree[x].size();i++){
            int next = tree[x][i];//다음지점
            node[next]-=1;//간선제거
            times[next] = max(times[next],times[x]+sec[next]);
            if(node[next]==0){//새로운 노드 생성
                q.push(next);
            }
        }
    }
    
    //결과
    int maxi = 0;
    for(int i=1;i<=n;i++){
        maxi = max(maxi,times[i]);
    }
    cout<<maxi;
}

int main(){
    cin.tie(0);
    cout.tie(0);

    input();
    bfs();
    return 0;
}
