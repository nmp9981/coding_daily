#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m;
vector<vector<int>> map(8,vector<int>(8,0));//지도
vector<pair<int,pair<int,int>>> camera;//번호, 위치
int total = 0;
int ans = 65;//사각지대의 수

//입력
void input(){
    cin>>n>>m;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            scanf("%d",&map[i][j]);
            //카메라를 벡터에 넣기
            if(map[i][j]>=1 && map[i][j]<=5){
                camera.push_back({map[i][j],{i,j}});
                total ++;//감시카메라 개수 증가
            }
        }
    }
}

//사각지대 찾기
void area_cnt(){
    int result = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(map[i][j]==0){
                result++;
            }
        }
    }
    ans = min(ans,result);//사각지대의 개수
}

//이동하기
void move(int dir, int x,int y){//방향,행,열
    switch(dir){
        //북,동,남,서
        case 0:
            for(int i=x-1;i>=0;i--){
                if(map[i][y]==6){//벽이 있다면
                    break;
                }
                if(map[i][y]==0){//사각지대
                    map[i][y] = 7;//감시표시
                }
            }
            break;
        case 1:
            for(int j=y+1;j<m;j++){
                if(map[x][j]==6){//벽이 있다면
                    break;
                }
                if(map[x][j]==0){//사각지대
                    map[x][j] = 7;//감시표시
                }
            }
            break;
        case 2:
            for(int i=x+1;i<n;i++){
                if(map[i][y]==6){//벽이 있다면
                    break;
                }
                if(map[i][y]==0){//사각지대
                    map[i][y] = 7;//감시표시
                }
            }
            break;
        case 3:
            for(int j=y-1;j>=0;j--){
                if(map[x][j]==6){//벽이 있다면
                    break;
                }
                if(map[x][j]==0){//사각지대
                    map[x][j] = 7;//감시표시
                }
            }
            break;
    }
}
//맵을 탐색하면서 감시
void dfs(int cctv_cnt){
    //모두 감시
    if(cctv_cnt == total){
        area_cnt();
        return;
    }
    
    int cctv = camera[cctv_cnt].first;
    int x = camera[cctv_cnt].second.first;
    int y = camera[cctv_cnt].second.second;
    
    vector<vector<int>> map_copy = map;//지도의 현재상태 저장
    
    switch(cctv){
        case 1:
            for(int dir=0;dir<4;dir++){
                move(dir,x,y);//이동
                dfs(cctv_cnt+1);//다음 카메라로
                map = map_copy;//맵갱신
            }
            break;
        case 2:
            for(int dir=0;dir<2;dir++){
                move(dir,x,y);//이동
                move(dir+2,x,y);//이동
                dfs(cctv_cnt+1);//다음 카메라로
                map = map_copy;//맵갱신
            }
            break;
        case 3:
            for(int dir=0;dir<4;dir++){
                move(dir,x,y);//이동
                move((dir+1)%4,x,y);//이동
                dfs(cctv_cnt+1);//다음 카메라로
                map = map_copy;//맵갱신
            }
            break;
        case 4:
            for(int dir=0;dir<4;dir++){
                move(dir,x,y);//이동
                move((dir+1)%4,x,y);//이동
                move((dir+2)%4,x,y);//이동
                dfs(cctv_cnt+1);//다음 카메라로
                map = map_copy;//맵갱신
            }
            break;
        case 5:
            for(int dir=0;dir<4;dir++){
                move(dir,x,y);//이동
            }
            dfs(cctv_cnt+1);//다음 카메라로
            map = map_copy;//맵갱신
            break;
    }
}

int main(){
    cin.tie(0);
    cout.tie(0);
     
    input();
    dfs(0);
    cout<<ans;
    return 0;
}
