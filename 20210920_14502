#include <iostream>
#include <iostream>
#include <string>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m;
int visit[8][8];//방문여부,맵
int map[8][8];//원래 맵
int dx[] = {-1,1,0,0};
int dy[] = {0,0,-1,1};
int ans = 0;

int bfs(){
    queue<pair<int,int>> q;
    //동시 탐색을 위해 초기지점들 모두 큐에 넣기
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(map[i][j]==2){
                q.push({i,j});
            }
        }
    }
    
    while(!q.empty()){
        //현재좌표
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        
        //4방향 탐색
        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            //범위내에 있고 미방문
            if(nx>=0 && nx<n && ny>=0 && ny<m){
                if(visit[nx][ny]==0){
                    visit[nx][ny] = 2;
                    q.push({nx,ny});
                }
            }
        }
    }
    
    //안전지대수
    int safe_area = 0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(visit[i][j]==0){
                safe_area++;
            }
        }
    }
    return safe_area;
}

void dfs(int block){
    //벽을 모두 세웠으면 초기화하고 시작
    if(block==3){
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                visit[i][j] = map[i][j];
            }   
        }
        int safe;
        safe = bfs();
        ans = max(ans,safe);
        return;
    }
    
    //벽을 또 세우기
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(map[i][j]==0){
                map[i][j] = 1;
                dfs(block+1);
                map[i][j] = 0;//원래대로
            }
        }
    }
}

int main()
{
    //입력
    cin>>n>>m;
    //지도입력
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>map[i][j];
        }
    }
    
    //벽 3개세우기
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(map[i][j]==0){
                map[i][j] = 1;
                dfs(1);
                map[i][j] = 0;//원래대로
            }
        }
    }
    
    //결과
    cout<<ans<<"\n";
    return 0;
}
