#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m,r1,r2;
vector<int> tree[100001];
int depth[100001];//각 노드의 깊이
int parent[100001];//각노드의 부모
int visit[100001];//각 노드의 방문여부
int dp[100001][18];//희소배열

//희소배열
void sparse(){
    for(int i=1;i<=n;i++){
        dp[i][0] = parent[i];//부모노드
    }
    for(int j=1;j<=17;j++){
        for(int i=1;i<=n;i++){
            dp[i][j] = dp[dp[i][j-1]][j-1];//2^i위 부모노드
        }
    }
}

void input(){
    cin>>n;
    //초기화
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
    //그래프 입력
    for(int i=0;i<n-1;i++){
        int a,b;
        cin>>a>>b;
        tree[a].push_back(b);//양방향 
        tree[b].push_back(a);
    }
}

//각 노드별 깊이,부모노드 구하기
void bfs(){
    queue<int> q;
    q.push(1);//루트를 1로
    visit[1] = 1;//방문 체크
    
    while(!q.empty()){
        //현재노드
        int x = q.front();
        q.pop();
        
        for(int i=0;i<tree[x].size();i++){
            int next = tree[x][i];//다음지점
            if(visit[next]==0){//미방문이면
                visit[next] = 1;//방문체크
                depth[next] = depth[x] + 1;//깊이 갱신
                parent[next] = x;//next의 부모는 x
                q.push(next);
            }
        }
    }
}

//LCA
int LCA(int x,int y){
    //x가 더 깊게
    if(depth[x]<depth[y]){
        swap(x,y);
    }
    //깊이가 같을때까지 거슬러 올라감
    for(int i=17;i>=0;i--){
        if(depth[x]-depth[y]>=(1<<i)){//2^i만큼 거슬러 올라감
            x = dp[x][i];
        }
    }
    //두 노드가 같을때까지 거슬러 올라감
    if(x==y){
        return x;
    }
    for(int i=17;i>=0;i--){
        if(dp[x][i] != 0 && dp[x][i] != dp[y][i]){
            x = dp[x][i];
            y = dp[y][i];
        }
    }
    return dp[x][0];
}

int main(){
    cin.tie(0);
    cout.tie(0);
    
    input();
    bfs();
    sparse();
    cin>>m;
    for(int i=0;i<m;i++){
        cin>>r1>>r2;
        cout<<LCA(r1,r2)<<"\n";
    }
    return 0;
}
