#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <queue>
using namespace std;

long long n;
long long p[6];
long long point_set[8][3] = {
    {0,1,2},
    {1,5,2},
    {5,4,2},
    {4,0,2},
    {0,1,3},
    {1,5,3},
    {5,4,3},
    {4,0,3}
};

//입력
void input(){
    cin>>n;
    for(int i=0;i<6;i++){
        cin>>p[i];
    }
}

//주사위가 1개인 경우
long long dice_one(){
    long long maxi = p[0];
    long long sum = 0;
    for(int i=0;i<6;i++){
        maxi = max(maxi,p[i]);
        sum+=p[i];
    }
    return sum-maxi;
}

//주사위 굴리기
void dice(){
    //주사위가 1개인 경우
    if(n==1){
        cout<<dice_one();
        return;
    }else{//주사위가 2개 이상
        //면이 1개
        long long one = p[0];
        for(int i=0;i<6;i++){
            one = min(one,p[i]);
        }
        //면이 2개
        long long two = p[0]+p[1];
        for(int i=0;i<6;i++){
            for(int j=0;j<6;j++){
                if(i==j || i+j==5){//나오면 안되는 조합
                    continue;
                }else{
                    two = min(two,p[i]+p[j]);
                }
            }
        }
        //면이 3개
        long long three = p[0]+p[1]+p[2];
        for(int i=0;i<8;i++){
            three = min(three,p[point_set[i][0]]+p[point_set[i][1]]+p[point_set[i][2]]);
        }
        //숫자의 총합 구하기
        long long vertex = 4*three;//꼭짓점
        long long edge = (8*n-12)*two;//모서리
        long long side = ((n-2)*(n-2)+4*(n-2)*(n-1))*one;
        cout<<vertex+edge+side;
        return;
    }
}

int main(){
    input();//입력
    dice();//주사위 굴리기
    return 0;
}
