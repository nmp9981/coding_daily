#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m;
int parent[200001];//각 노드의 부모노드
vector<pair<int,pair<int,int>>> road;//비용, 간선
int total = 0;//총 비용

//입력
void input(){
    //각 노드의 부모노드 초기화
    for(int i=0;i<=n;i++){
        parent[i] = i;
    }
    //간선 넣기
    for(int i=1;i<=m;i++){
        int a,b,d;
        cin>>a>>b>>d;
        road.push_back({d,{a,b}});//간선 넣기
        total += d;//비용추가
    }
    //정렬
    sort(road.begin(),road.end());
}

//루트노드 찾기
int find(int x){
    if(parent[x]==x){//루트노드라면
        return x;
    }
    parent[x] = find(parent[x]);
    return parent[x];
}

//크루스칼 알고리즘 적용
void kruskal(){
    int node = 0;//간선의 수
    int fee = 0;//비용
    
    for(int i=0;i<road.size();i++){
        int cost = road[i].first;//비용
        int x = road[i].second.first;//간선
        int y = road[i].second.second;
        
        //루트노드가 다르면 합체
        int a = find(x);
        int b = find(y);
        if(a!=b){
            parent[b] = a;//합체
            node++;//간선 증가
            fee+=cost;//비용증가
        }
        
        //최소 스패닝 트리 만족
        if(node==n-1){
            break;
        }
    }
    cout<<total-fee<<"\n";//출력
}

int main(){
    cin.tie(0);
    cout.tie(0);
     
    while(true){
        cin>>n>>m;
        if(n==0 && m==0){
            break;
        }else{
            total = 0;
            input();
            kruskal();
            road.clear();//초기화
        }
    }
    return 0;
}
