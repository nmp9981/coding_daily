#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m;
vector<int> tree[100001];//트리
int parent[100001];//각노드의 부모노드
int depth[100001];//각노드의 깊이
int visit[100001];//방문여부
int spar[100001][18];//희소배열 

//입력
void input(){
    cin>>n;
    //초기화
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
    for(int i=0;i<n-1;i++){
        int a,b;
        cin>>a>>b;
        tree[a].push_back(b);//양방향 그래프
        tree[b].push_back(a);
    }
}

//bfs
void bfs(int start){
    queue<int> q;
    q.push(1);
    visit[1] = 1;
    
    while(!q.empty()){
        //현재노드
        int x = q.front();
        q.pop();
        
        //이웃노드 탐색
        for(int i=0;i<tree[x].size();i++){
            int next = tree[x][i];//다음지점
            if(visit[next]==0){//미방문이면
                visit[next] = 1;//방문체크
                depth[next] = depth[x] + 1;//깊이 갱신
                parent[next] = x;//next의 부모가 x
                q.push(next);
            }
        }
    }
}

//희소배열
void sparse(){
    //초기화
    for(int i=1;i<=n;i++){
        spar[i][0] = parent[i];
    }
    //희소배열
    for(int j=1;j<=17;j++){
        for(int i=1;i<=n;i++){
            //각 노드마다 2^i번째 부모 갱신
            spar[i][j] = spar[spar[i][j-1]][j-1];
        }
    }
}

//LCA
int LCA(int x,int y){
    //x가 더 깊게
    if(depth[x]<depth[y]){
        swap(x,y);
    }
    //같은 깊이가 될때까지
    for(int i=17;i>=0;i--){
        if(depth[x]-depth[y]>=(1<<i)){//2^i만큼 거슬러 올라감
            x = spar[x][i];
        }
    }
    //두 노드가 같을때까지
    if(x==y){
        return x;
    }
    for(int i=17;i>=0;i--){
        if(spar[x][i]!=0 && spar[x][i] != spar[y][i]){
            x = spar[x][i];
            y = spar[y][i];
        }
    }
    return spar[x][0];//같기 직전에서 1올라간것이 최고조상
}

int main(){
    cin.tie(0);
    cout.tie(0);

    input();
    bfs(1);//1번 노드부터
    sparse();
    cin>>m;
    for(int i=0;i<m;i++){
        int a,b;
        cin>>a>>b;
        cout<<LCA(a,b)<<"\n";
    }
    return 0;
}
