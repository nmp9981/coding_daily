#include <iostream>
#include <iostream>
#include <string>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int v;//정점의 개수
vector<pair<int,int>> map[100001];
int visit[100001];//각 정점 방문여부
int diameter = 0;
int far_node;//가장 멀리있는 노드

//방문기록 초기화
void init_visit(){
    for(int i=1;i<=v;i++){
        visit[i] = 0;
    }
}

int dfs(int start,int dist){
    //방문 표시
    visit[start] = 1;
    //지름 갱신
    if(diameter<dist){
        diameter = dist;
        far_node = start;//노드 갱신
    }
    //이웃탐색
    for(int i=0;i<map[start].size();i++){
        int next = map[start][i].first;//다음지점
        int next_dist = map[start][i].second;//다음지점까지의 거리
        if(visit[next]==0){//미방문이면
            dfs(next,next_dist+dist);    
        }
    }
    return diameter;
}

int main()
{
    cin.tie(0);
    cout.tie(0);

    //입력
    cin>>v;
    for(int i=0;i<v;i++){
        int a;//정점번호
        cin>>a;
        while(true){
            int b,d;
            cin>>b;
            if(b==-1){//행입력 종료
                break;
            }
            cin>>d;
            map[a].push_back({b,d});//단방향 그래프
        }
    }
    
    //가장 깊은 노드 구하기
    diameter = dfs(1,0);
    //트리의 지름(가장 깊은 노드 - 가장 깊은 노드)
    diameter = 0;
    init_visit();//방문기록 초기화
    int result = dfs(far_node,0);
    //결과
    cout<<result;
    return 0;
}
