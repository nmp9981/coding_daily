#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언

int n,m;
int maps[50][50];//지도
int visit[50][50];//방문시간
vector<pair<int,int>> virus;//전체 바이러스
vector<pair<int,int>> active_virus;//선택한 바이러스
int dx[4] = {-1,1,0,0};//축 이동
int dy[4] = {0,0,-1,1};
const int inf = 10000000;
int ans = inf;//정답

//입력
void input(){
	cin>>n>>m;
	//지도 입력
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cin>>maps[i][j];
			if(maps[i][j]==2){//바이러스 넣기
				virus.push_back({i,j});
			}
		}
	}
}

//탐색
int bfs(){
	memset(visit,-1,sizeof(visit));//방문시간 초기화
	queue<pair<int,int>> q;
	//2인지점을 모두 큐에 넣기 
	for(int i=0;i<active_virus.size();i++){
		int visit_x = active_virus[i].first;
		int visit_y = active_virus[i].second;
		q.push({visit_x,visit_y});
		visit[visit_x][visit_y] = 0;
	}
	
	int times = 0;//시간
	while(!q.empty()){
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		
		//4방탐색
		for(int i=0;i<4;i++){
			int nx = x + dx[i];
			int ny = y + dy[i];
			//범위내에 들고 미방문
			if(nx>=0 && nx<n && ny>=0 && ny<n && visit[nx][ny] == -1){
				//벽이 이니면
				if(maps[nx][ny] != 1){
					q.push({nx,ny});
					visit[nx][ny] = visit[x][y] + 1;
					times = visit[nx][ny];
				}
			}
		}
	}
	
	//빈공간이 있는지 확인
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			//벽이 아닌곳이 미방문이면
			if(visit[i][j]==-1 && maps[i][j] != 1){
				return inf;
			}
		}
	}
	return times;
}

//바이러스 선택
void select_virus(int cnt,int idx){
	//바이러스를 모두 선택
	if(cnt==m){
		ans = min(ans,bfs());
		return;
	}
	
	//바이러스 조합선택
	for(int i=idx;i<virus.size();i++){
		int vx = virus[i].first;
		int vy = virus[i].second;
		active_virus.push_back({vx,vy});
		select_virus(cnt+1,i+1);
		active_virus.pop_back();
	}
}

int main(){
    cin.tie(0);
    cout.tie(0);
    
    input();//입력
   	select_virus(0,0);//바이러스 선택
    //결과
    if(ans>=inf){
    	cout<<-1;
    }else{
    	cout<<ans;
    }
    return 0;
}
