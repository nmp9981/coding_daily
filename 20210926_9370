#include <iostream>
#include <iostream>
#include <string>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m,t,s,g,h,co;
vector<pair<int,int>> map[2001];//그래프
int dist[2001];//각 정점에서의 거리
int inf = 100000000;//초기화 값

//입력
void input(){
    //입력
    cin>>n>>m>>t;//정점, 간선, 목적지 후보개수
    cin>>s>>g>>h;//출발점, 지나가야하는 지점
    for(int i=0;i<m;i++){
        int a,b,d;
        cin>>a>>b>>d;
        map[a].push_back({b,d});//양방향 그래프(지점,거리)
        map[b].push_back({a,d});
        if(a==g && b==h || a==h && b==g){
        co = d;
        }
    }
}

//그래프 초기화
void init_map(){
    for(int i=1;i<=n;i++){
        map[i].clear();
    }
}

//start->end까지의 최단거리
int dijk(int start,int end){
    
    //거리 초기화
    for(int i=1;i<=n;i++){
        dist[i] = inf;
    }
    
    //처음값 저장
    dist[start] = 0;
    priority_queue<pair<int,int>> pq;//우선순위 큐(정점, 거리)
    pq.push({0,start});
    
    //bfs와 비슷
    while(!pq.empty()){
        //현재좌표 꺼내기
        int x = pq.top().second;//정점
        int x_dist = -pq.top().first;//거리(최솟값을 꺼내므로 -를 함)
        pq.pop();
        
        //이전 거리보다 더 크다면
        if(dist[x] < x_dist){//갱신할 필요도 없고 이웃을 살펴보지 않아도됨
            continue;
        }
        
        //이웃탐색
        for(int i=0;i<map[x].size();i++){
            int next = map[x][i].first;//다음 지점
            int next_dist = map[x][i].second;//다음 지점까지의 거리보다
            
            //다음 지점에서 더 작은 거리가 나오면 업데이트
            if(dist[next] > x_dist + next_dist){//지금까지의 거리 + 다음지점까지의 거리
                dist[next] = x_dist + next_dist;
                pq.push({-dist[next],next});//정점,거리(39번줄에서 음수로 넣었었음)
            }
        }
    }
    //최단거리 결과
    return dist[end];
}

int main()
{
    cin.tie(0);
    cout.tie(0);

    //입력
    int te;
    cin>>te;//테스트 케이스
    for(int num=0;num<te;num++){
        input();//입력
        
        //목표
        vector<int> goal;
        for(int i=0;i<t;i++){
            int go;
            cin>>go;
            
            //s->g->h->go
            if(dijk(s,go) == dijk(s,g)+co+dijk(h,go)){
                goal.push_back(go);
            }else if(dijk(s,go) == dijk(s,h)+co+dijk(g,go)){
                goal.push_back(go);
            }
        }
        
        init_map();//맵 초기화
        
        //최종목적지
        sort(goal.begin(),goal.end());
        for(int i=0;i<goal.size();i++){
            cout<<goal[i]<<" ";
        }
        cout<<"\n";
    }
    
    return 0;
}
