#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
int n,m;
int map[101][101];
int wall[101][101];//벽부수기 최소횟수
const int inf = 1000000;//초기화값
int dx[] = {-1,1,0,0};//x축이동
int dy[] = {0,0,-1,1};//y축이동

//입력
void input(){
    cin>>m>>n;//열, 행
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            scanf("%1d",&map[i][j]);
        }
    }
    memset(wall,inf,sizeof(wall));//초기화
}

//bfs
void bfs(){
    queue<pair<int,int>> q;
    q.push({0,0});
    wall[0][0] = 0;//초기지점

    while(!q.empty()){
        //현재위치
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        
        //다음지점탐색
        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            //범위내에 있고
            if(nx>=0 && nx<n && ny>=0 && ny<m){
                //벽이 있으면
                if(map[nx][ny]==1){
                    //더 작은값이 오면
                    if(wall[nx][ny]>wall[x][y]+1){
                        wall[nx][ny] = wall[x][y]+1;
                        q.push({nx,ny});
                    }
                }else{//벽이 없으면
                    if(wall[nx][ny]>wall[x][y]){
                        wall[nx][ny] = wall[x][y];
                        q.push({nx,ny});
                    }
                }
            }
        }
    }
    //출력
    cout<<wall[n-1][m-1];
}

int main(){
    cin.tie(0);
    cout.tie(0);

    input();//입력
    bfs();//벽부수기
    return 0;
}
