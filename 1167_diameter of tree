import sys 
sys.setrecursionlimit(10**6) #재귀깊이 늘려줌(dps시 참고)

#dfs
def dfs(x, result):
  for i in range(len(matrix[x])):
    end, dis = matrix[x][i]
    if result[end] == 0: #아직 미방문
      result[end] = result[x] + dis
      dfs(end, result)

#입력
n = int(input())
matrix = [[] for i in range(n+1)]
#트리 입력
for i in range(n):
  li = list(map(int, input().split()))
  l = len(li)
  #2개씩 matrix에 넣기
  for j in range(1,l//2):
    matrix[li[0]].append([li[2*j-1],li[2*j]])

#방문노드
result1 = [0]*(n+1)
result2 = [0]*(n+1)

#가장 깊은 노드 찾기
dfs(1,result1)
result1[1] = 0 #루트 노드가 정해져 있지않아 양방향 입력

#해당노드에서 가장 깊은 노드 찾기
maxi = 0
index = 0
#가장 깊은 인덱스 찾기
for i in range(len(result1)):
  if maxi < result1[i]:
    maxi = result1[i]
    index = i
dfs(index, result2)
result2[index] = 0

#출력, 트리의 지름
print(max(result2))
