#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m,a;
vector<int> tree[1001];
int visit[1001];//방문여부
int node[1001];//진입차수

//입력
void input(){
    cin>>n;
    cin>>m;
    for(int i=1;i<=m;i++){
        cin>>a;
        vector<int> order;//순서정리
        for(int j=0;j<a;j++){
            int b;
            cin>>b;
            order.push_back(b);
        }
        //단방향 그래프
        for(int j=0;j<a-1;j++){
            tree[order[j]].push_back(order[j+1]);
            node[order[j+1]]+=1;//진입차수 증가
        }
    }
}

//위상정렬
void bfs(){
    //진입차수가 0인것 모두 큐에 넣기
    queue<int> q;
    for(int i=1;i<=n;i++){
        if(node[i]==0){
            q.push(i);
        }
    }
    
    vector<int> result;//결과를 담는 리스트
    while(!q.empty()){
        int x = q.front();//현재노드
        q.pop();
        result.push_back(x);//결과 담기
        
        //이웃탐색
        for(int i=0;i<tree[x].size();i++){
            int next = tree[x][i];//다음지점
            node[next]-=1;//간선제거
            if(node[next]==0){//새로운 루트 노드 탄생
                q.push(next);
            }
        }
    }
    //사이클 존재여부 판단
    if(result.size()!=n){
        cout<<0;
        return;
    }else{
        for(int i=0;i<result.size();i++){
            cout<<result[i]<<"\n";
        }
    }
}

int main(){
    cin.tie(0);
    cout.tie(0);
    
    input();//입력
    bfs();//위상정렬
    return 0;
}
