#include <iostream>
#include <iostream>
#include <string>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,d,c;
vector<pair<int,int>> map[10001];//그래프
int com[10001];//감염여부
int inf = 200000000;//초기값

//입력
void input(){
    cin>>n>>d>>c;
    for(int i=0;i<d;i++){
        int a,b,s;
        cin>>a>>b>>s;
        map[b].push_back({a,s});
    }
}

//맵 초기화
void init_map(){
    for(int i=1;i<=n;i++){
        map[i].clear();
    }
}

//감염기록 초기화
void init_com(){
    for(int i=1;i<=n;i++){
        com[i] = inf;
    }
}

//최단거리
void dijk(int start){
    com[start] = 0;//감염시간
    priority_queue<pair<int,int>> pq;//우선순위 큐
    pq.push({0,start});//시간,노드
    
    while(!pq.empty()){
        int sec = -pq.top().first;//시간,최소힙 주의
        int node = pq.top().second;//노드
        pq.pop();
        
        //더 큰수가 오면
        if(sec > com[node]){
            continue;
        }
        
        //노드의 이웃탐색
        for(int i=0;i<map[node].size();i++){
            //다음 지점
            int next = map[node][i].first;
            int next_time = map[node][i].second;
            //더 큰수가 오면
            if(com[next]>sec+next_time){
                com[next]=sec+next_time;//갱신
                pq.push({-com[next],next});
            }
        }
    }
    
    //감염된 컴퓨터 대수 및 최단시간
    int cnt = 0;
    int ans = 0;
    for(int i=1;i<=n;i++){
        if(com[i]<inf){
            cnt++;
            ans = max(com[i],ans);
        }
    }
    cout<<cnt<<" "<<ans<<"\n";
}

int main()
{
    cin.tie(0);
    cout.tie(0);

    //입력
    int t;
    cin>>t;
    for(int test=0;test<t;test++){
        input();//입력
        init_com();//감염기록 초기화
        dijk(c);
        init_map();//지도 초기화
    }

    return 0;
}
