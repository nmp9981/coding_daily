import sys 
sys.setrecursionlimit(10**6) #재귀깊이 늘려줌(dps시 참고)
from collections import deque

#bfs
def bfs():
  while q:
    [z,y,x] = q.popleft()
    for i in range(6): #6개의 큐
      nx = x + dx[i]
      ny = y + dy[i]
      nz = z + dz[i]
      if 0 <= nx < n and 0 <= ny < m and 0 <= nz < h and matrix[nz][ny][nx] == 0: #0->1
        matrix[nz][ny][nx] = matrix[z][y][x] + 1
        q.append([nz,ny,nx])

#위치변수
dx = [-1,1,0,0,0,0]
dy = [0,0,-1,1,0,0]
dz = [0,0,0,0,-1,1]

#입력
n,m,h = map(int, input().split())
matrix = []
for i in range(h):
  a=[]
  for j in range(m):
    b = list(map(int, input().split()))
    a.append(b)
  matrix.append(a)

#여러개의 시작점을 큐에 동시에 담기
q = deque()
for i in range(h):
  for j in range(m):
    for k in range(n):
      if matrix[i][j][k] == 1:
        q.append([i,j,k])

#bfs함수 실행
bfs()

#날짜출력
day = 0
for i in range(h):
  for j in range(m):
    for k in range(n):
      if day < matrix[i][j][k]:
        day = matrix[i][j][k]
      if matrix[i][j][k] == 0: #익지않은 토마토 존재
        print(-1)
        exit()
      day = max(1,day)
print(day - 1) #맨처음에 1부터 시작
