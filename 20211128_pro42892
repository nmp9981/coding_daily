#include <string>
#include <vector>
#include <map>
#include <cstring>
#include <queue>

using namespace std;

pair<int,int> tree[10001];
map<int,pair<int,int>> m;//key : idx, value : 위치
vector<int> pre;//전위순회
vector<int> post;//후위순회

//정렬을 위한 구조체
struct edge{
    int idx,x,y;
};

//y축 기준으로 내림차순 정렬
bool cmp(edge a,edge b){
    if(a.y==b.y){//y축이 같다면 x축을 기준으로 오름차순
        a.x<b.x;
    }
    return a.y>b.y;
}

//트리 제작
void insert(int root, edge e){
    pair<int,int> nowpos = m[root];//현 위치(인덱스, 위치)
    //왼쪽 자식인 경우
    if(nowpos.first > e.x){
        //맨 끝
        if(tree[root].first == root){
            tree[root].first = e.idx;
            return;
        }else{
            //재귀
            insert(tree[root].first,e);
        }
    }else{//오른쪽 자식일 경우
        //맨 끝
        if(tree[root].second == root){
            tree[root].second = e.idx;
            return;
        }else{
            //재귀
            insert(tree[root].second,e);
        }
    }
    return;
}

//전위순회
void front(int root){
    pre.push_back(root);
    //리프가 아니라면 왼쪽 탐색
    if(tree[root].first != root){
        front(tree[root].first);
    }
    //리프가 아니라면 오른쪽 탐색
    if(tree[root].second != root){
        front(tree[root].second);
    }   
}
//후위순회
void end(int root){
    //리프가 아니라면 왼쪽 탐색
    if(tree[root].first != root){
        end(tree[root].first);
    }
    //리프가 아니라면 오른쪽 탐색
    if(tree[root].second != root){
        end(tree[root].second);
    }   
    post.push_back(root);
}

vector<vector<int>> solution(vector<vector<int>> nodeinfo) {
    vector<vector<int>> answer;
    vector<edge> node;//정렬용
    
    //트리 초기화
    for(int i=1;i<nodeinfo.size();i++){
        tree[i].first = i;//왼쪽 자식
        tree[i].second = i;//오른쪽 자식
    }
    
    //map을 이용해 정렬
    for(int i=0;i<node.info.size();i++){
        //번호, x,y
        node.push_back({i+1,nodeinfo[i][0],nodeinfo[i][1]});
        //key : index, value : 위치
        m[i+1] = {nodeinfo[i][0],nodeinfo[i][1]};
    }
    //y축 기준으로 정렬
    sort(node.begin(),node.end(),cmp);
    
    int root = node[0].idx;//루트 인덱스 번호
    //트리 생성
    for(int i=1;i<=node.size();i++){
        edge now = node[i];//인덱스 번호 주의,현재 노드
        insert(root,now);//자식노드 붙이기
    }
    
    //전위순회
    front(root);
    //후위순회
    end(root);
    
    answer.push_back(pre);
    answer.push_back(post);
    return answer;
}
