#include <iostream>
#include <iostream>
#include <string>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;

string map[50][50];
string visit[50][50];
int dx[] = {-1,1,0,0};
int dy[] = {0,0,-1,1};
int n,m;
int ans = 0;
queue<pair<pair<int,int>,int>> q;

//최단거리
void bfs(int a,int b){
    //초기화
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            visit[i][j] = map[i][j];
        }
    }
    
    //처음값 넣기
    q.push({{a,b},0});
    visit[a][b] = "W";//방문체크
    
    //bfs
    while(!q.empty()){
        //현재위치
        int x = q.front().first.first;
        int y = q.front().first.second;
        int dist = q.front().second;
        q.pop();
        
        //최단거리 갱신
        ans = max(ans,dist);
        
        //4방향 탐색
        for(int i=0;i<4;i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            //범위내에 있고 미방문
            if(nx>=0 && nx<n && ny>=0 && ny<m){
                if(visit[nx][ny] == "L"){
                    visit[nx][ny]="W";
                    q.push({{nx,ny},dist+1});
                }
            }
        }
    }
    
}
int main()
{
    cin.tie(0);
    cout.tie(0);
    
    //입력
    cin>>n>>m;
    
    //지도입력
    string line;
    for(int i=0;i<n;i++){
        cin>>line;
        for(int j=0;j<m;j++){
            map[i][j] = line[j];
        }
    }
    
    //보물이 묻혀있는지점
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(map[i][j]=="L"){
                bfs(i,j);
            }
        }
    }
    
    //출력
    cout<<ans;
    return 0;
}
