#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n,m,k;
int parent[10001];//각 노드의 부모노드
int pay[10001];//친구비
int root_node[10001];//루트노드 판별

//루트 노드 찾기
int find(int x){
    if(parent[x]==x){
        return x;
    }
    parent[x] = find(parent[x]);
    return parent[x];
}

//합치기
void merge(int x,int y){
    x = find(x);
    y = find(y);
    if(x==y){
        return;
    }else{
        //더 싼쪽을 루트로
        if(pay[x]<pay[y]){
            parent[y] = x;//x는 y의 부모
        }else{
            parent[x] = y;//y는 x의 부모
        }
    }
}

//초기화
void init(){
    for(int i=1;i<=n;i++){
        parent[i] = i;
    }
}

//입력
void input(){
    for(int i=1;i<=n;i++){
        cin>>pay[i];
    }
    for(int i=1;i<=m;i++){
        int a,b;
        cin>>a>>b;
        merge(a,b);
    }
    return;
}

//모든학생을 친구로 만들 수 있는가?
void result(){
    //총 친구비용
    int cost = 0;
    for(int i=1;i<=n;i++){
        int node = find(i);
        if(root_node[node]==0){//미방문이면
            root_node[node] = 1;
            cost+=pay[node];
        }
    }
    //판단
    if(cost<=k){
        cout<<cost;
    }else{
        cout<<"Oh no";
    }
}

int main(){
    cin.tie(0);
    cout.tie(0);
    
    cin>>n>>m>>k;
    init();//초기화
    input();//입력
    result();//모든 학생을 친구로 만들 수 있는가?
    return 0;
}
