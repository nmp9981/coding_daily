#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cstring>
#include <set>

using namespace std;

int n,m,k;
const int maxi = 11;
int food[maxi][maxi];//현재 양분
int A[maxi][maxi];//추가 양분
int died[maxi][maxi];//죽은나무
vector<int> tree[maxi][maxi];//나무위치, 나이
//축 정보
int dx[8] = {0,0,-1,1,-1,-1,1,1};
int dy[8] = {-1,1,0,0,-1,1,-1,1};

//입력
void input(){
	cin>>n>>m>>k;
	//추가양분 입력
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			cin>>A[i][j];
			food[i][j] = 5;//기본 양분
			tree[i][j].clear();//초기화
		}
	}
	//나무입력
	for(int i=1;i<=m;i++){
		int a,b,d;
		cin>>a>>b>>d;
		tree[a][b].push_back(d);//위치,나이
	}
}

//봄, 여름
void spring_summer(){
    memset(died,0,sizeof(died));//죽은 나무 초기화
    //봄
    //나이 어린 나무부터 먹어야 하므로 오름차순정렬
    for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			sort(tree[i][j].begin(),tree[i][j].end());
		}
	}
	
	//양분먹기
	for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
		    //어린나무부터
			for(int k=0;k<tree[i][j].size();k++){
			    //먹을 수 있다면
			    if(food[i][j]>=tree[i][j][k]){
			        food[i][j]-=tree[i][j][k];//양분섭취
			        tree[i][j][k]+=1;//나이증가
			    }else{
			        died[i][j] += (tree[i][j][k]/2);
			        tree[i][j].erase(tree[i][j].begin()+k);
			        k--;
			    }
			}
		}
	}
    //여름
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            food[i][j]+=died[i][j];
        }
    }
}

//가을
void fall(){
    //번식
    for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			for(int k=0;k<tree[i][j].size();k++){
			    //나무의 나이가 5의 배수
			    if(tree[i][j][k]%5==0 && tree[i][j][k]>0){
			        //8방 번식
			        for(int dir=0;dir<8;dir++){
			            int nx = i + dx[dir];
			            int ny = j + dy[dir];
			            //범위내에 들면
			            if(nx>=1 && nx<=n && ny>=1 && ny<=n){
			                //번식하기
			                tree[nx][ny].push_back(1);//새 나무 추가
			            }
			        }
			    }
			}
		}
	}
}

//겨울
void winter(){
    //양분 추가
    for(int i=1;i<=n;i++){
		for(int j=1;j<=n;j++){
			food[i][j]+=A[i][j];
		}
	}
}

//생존한 나무의 수
int survive(){
    int cnt = 0;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            cnt+=tree[i][j].size();
        }
    }
    return cnt;
}
int main(){
	input();//입력
	for(int year=1;year<=k;year++){
	    spring_summer();//봄, 여름
	    fall();//가을
	    winter();//겨울
	}
	cout<<survive();//생존한 나무의 수
	return 0;
}
