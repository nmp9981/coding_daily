#include <iostream>
#include <string>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;

int n,m;
int map[300][300];
int map_ori[300][300];
int melt[300][300];
int dx[] = {-1,1,0,0};
int dy[] = {0,0,-1,1};
int cnt = 0;

//dfs
bool dfs(int x,int y){
  //범위내에 있는가?
  if(x<0 || x>=n || y<0 || y>=m){
    return false;
  }

  //k->0
  if(map[x][y] > 0){
    map[x][y] = 0;
    cnt++;
    for(int i=0;i<4;i++){
      int nx = x + dx[i];
      int ny = y + dy[i];
      dfs(nx,ny);
    }
  }
  return true;
}

int main(){
  cin.tie(0);
  cout.tie(0);

  //입력
  cin>>n>>m;
  //지도입력
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      cin>>map_ori[i][j];
    }
  }

  int year = 0;
  while(true){
    //녹는양
    if(year >= 1){
      for(int i=1;i<n-1;i++){
        for(int j=1;j<m-1;j++){
          int melt_cnt = 0;
          //4방향에 바다가 있는가?
          for(int k=0;k<4;k++){
            if(map_ori[i+dx[k]][j+dy[k]]==0){
              melt_cnt++;
            }
          }
          melt[i][j] = melt_cnt;
        }
      }
    }
    //초기화
    for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
        map_ori[i][j] = max(0,map_ori[i][j]-melt[i][j]);
        map[i][j] = map_ori[i][j];
      }
    }

    //덩어리 수 구하기
    int area = 0;
    for(int i=0;i<n;i++){
      for(int j=0;j<m;j++){
        if(dfs(i,j)==true && cnt>0){
          area ++ ;
          cnt = 0;
        }
      }
    }

    //2개로 나눠짐
    if(area>=2){
      cout<<year<<"\n";
      break;
    }
    //계속 한덩어리
    if(area == 0){
      cout<<0<<"\n";
      break;
    }

    year++;
  }
  return 0;
}
