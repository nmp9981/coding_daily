#include <string>
#include <vector>
#include <cstring>

using namespace std;
const int maxi = 102;
int maps[maxi][maxi];//지도

//설치 조건
bool is_build(int x,int y,int z){
    //기둥
    if(z==0){
        if(y==0 || maps[x][y-1]==0){//바닥위에 있거나 다른 기둥위
            return true;
        }else if(maps[x][y]==1 || (x>0 && maps[x-1][y]==1)){//보의 한쪽 끝부분 위
            return true;
        }
    }else if(z==1){//보
        //다른보와 동시 연결
        if((x>0 && maps[x-1][y]==1) && maps[x+1][y]==1){
            return true;
        //한쪽 끝부분이 기둥위
        }else if((y>0 && maps[x][y-1]==0) || (y>0 && maps[x+1][y-1]==0)){
            return true;
        }
    }
    return false;
}

//삭제 조건
bool is_del(int c,int r,int z){
    //기둥
    if(z==0){
        if(r<n && maps[r+1][c]==0){//위에 기둥이 있음
            return false;
        }else if(maps[r+1][c]==1 && maps[r+1][c+1]==-1 && maps[r+1][c-1]==-1 && maps[r][c+1]==-1){
            //보가 홀로 남김
            return false;
        }else if(maps[r+1][c-1]==1 && maps[r+1][c]==-1 && maps[r+1][c-2]==-1 && maps[r][c-1]==-1){
            return false;
        }
    }else if(z==1){//보
        //양끝에 보가 없음
        if(maps[r-1][c]!=0 && maps[r][c-1]!=1){
            return true;
        }else if(maps[r-1][c+1]!=0 && maps[r][c-1]!=1){
            //한쪽 끝부분이 기둥위
            return true;
        }
    }
    return true;
}

//기둥과 보 설치
void frame(vector<vector<int>> build_frame,int n){
    int size_build = build_frame.size();//벡터크기
    memset(maps,-1,sizeof(maps));//초기화
    //조건에 따라 구조물 설치하기
    for(int i=0;i<size_build;i++){
        int x = build_frame[i][0];//x
        int y = build_frame[i][1];//y
        int inst = build_frame[i][2];//설치물
        int ox = build_frame[i][3];//설치여부
        if(ox==1){//설치함
            if(is_build(x,y,inst)==true){
                maps[x][y] = inst;
            }
        }else{//삭제함
            if(is_del(x,y,inst)==true){
                maps[x][y] = -1;
            }
        }
    }
}

//전체 요약
vector<vector<int>> solution(int n, vector<vector<int>> build_frame) {
    vector<vector<int>> answer;
    build(frame,n);//기둥과 보 설치
    //설치한것 가져오기
    for(int i=0;i<=n;i++){
        for(int j=0;j<=n;j++){
            if(maps[i][j]!=-1){
                answer.push_back({i,j,maps[i][j]});
            }
        }
    }
    return answer;
}
