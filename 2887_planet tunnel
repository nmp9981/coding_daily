#include <iostream>
#include <cstring>
#include <cmath>
#include <cctype>
#include <algorithm>
#include <vector>
#include <chrono>
#include <stack>
#include <queue>
#include <deque>
#include <utility>

using namespace std;//이름공간 선언
using namespace chrono;
int n;
int parent[100001];//각 노드의 부모노드
vector<pair<int,int>> map_x;//x좌표
vector<pair<int,int>> map_y;//y좌표
vector<pair<int,int>> map_z;//z좌표
vector<pair<int,pair<int,int>>> diff;//좌표차이(거리,간선)

//입력
void input(){
    cin>>n;
    //부모노드 초기화
    for(int i=0;i<n;i++){
        parent[i] = i;
    }
    //행성 입력
    for(int i=0;i<n;i++){
        int a,b,c;
        cin>>a>>b>>c;
        map_x.push_back({a,i});//좌표, 노드번호
        map_y.push_back({b,i});//좌표, 노드번호
        map_z.push_back({c,i});//좌표, 노드번호
    }
    //정렬
    sort(map_x.begin(),map_x.end());//x축 기준 정렬
    sort(map_y.begin(),map_y.end());//y축 기준 정렬
    sort(map_z.begin(),map_z.end());//z축 기준 정렬
}

//각 노드의 루트노드
int find(int x){
    if(parent[x]==x){//루트노드이면 
        return x;
    }
    parent[x] = find(parent[x]);
    return parent[x];
}

//크루스칼
void kruskal(){
    //좌표의 차이 넣기(거리, 간선)
    for(int i=0;i<n-1;i++){
        diff.push_back({map_x[i+1].first-map_x[i].first,{map_x[i].second,map_x[i+1].second}});
        diff.push_back({map_y[i+1].first-map_y[i].first,{map_y[i].second,map_y[i+1].second}});
        diff.push_back({map_z[i+1].first-map_z[i].first,{map_z[i].second,map_z[i+1].second}});
    }
    sort(diff.begin(),diff.end());//정렬
    
    int sum = 0;//int를 초과할 수 있음
    int node = 0;//간선의 개수
    for(int i=0;i<diff.size();i++){
        int cost = diff[i].first;//비용
        int x = diff[i].second.first;//두 노드
        int y = diff[i].second.second;
        
        int a = find(x);
        int b = find(y);
        if(a!=b){//루트 노드가 다르면
            parent[b] = a;//연결
            sum+=cost;//비용 합치기
            node++;//간선 1개 추가
        }
        
        //간선 n-1개를 채우고 종료
        if(node == n-1){
            break;
        }
    }
    //출력(n=1이라는 예외 케이스가 있음)
    cout<<sum;
}

int main(){
    cin.tie(0);
    cout.tie(0);

    input();//입력
    kruskal();//크루스칼
    return 0;
}
